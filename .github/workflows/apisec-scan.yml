# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

# APIsec addresses the critical need to secure APIs before they reach production.
# APIsec provides the industryâ€™s only automated and continuous API testing platform that uncovers security vulnerabilities and logic flaws in APIs.
# Clients rely on APIsec to evaluate every update and release, ensuring that no APIs go to production with vulnerabilities.

# How to Get Started with APIsec.ai
# 1. Schedule a demo at https://www.apisec.ai/request-a-demo .
#
# 2. Register your account at https://cloud.apisec.ai/#/signup .
#
# 3. Register your API . See the video (https://www.youtube.com/watch?v=MK3Xo9Dbvac) to get up and running with APIsec quickly.
#
# 4. Get GitHub Actions scan attributes from APIsec Project -> Configurations -> Integrations -> CI-CD -> GitHub Actions
#
# apisec-run-scan
#
# This action triggers the on-demand scans for projects registered in APIsec.
# If your GitHub account allows code scanning alerts, you can then upload the sarif file generated by this action to show the scan findings.
# Else you can view the scan results from the project home page in APIsec Platform.
# The link to view the scan results is also displayed on the console on successful completion of action.

# This is a starter workflow to help you get started with APIsec-Scan Actions

name: APIsec

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "Principal" branch
  # Customize trigger events based on your DevSecOps processes.
  push:
    branches: [ "Principal", "Main" ]
  pull_request:
    branches: [ "Principal" ]
  schedule:
    - cron: '21 8 * * 4'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


permissions:
  contents: read

jobs:

  Trigger_APIsec_scan:
    permissions:
      security-events: write # for github/codeql-action/upload-sarif to upload SARIF results
      actions: read # only required for a private repository by github/codeql-action/upload-sarif to get the Action run status
    runs-on: ubuntu-latest

    steps:
       - name: APIsec scan
         uses: apisec-inc/apisec-run-scan@025432089674a28ba8fb55f8ab06c10215e772ea
         with:
          # The APIsec username with which the scans will be executed
          apisec-username: ${{ secrets.apisec_username }}
          # The Password of the APIsec user with which the scans will be executed
          apisec-password: ${{ secrets.apisec_password}}
          # The name of the project for security scan
          apisec-project: "VAmPI"
          # The name of the sarif format result file The file is written only if this property is provided.
          sarif-result-file: "apisec-results.sarif"
       - name: Import results
         uses: github/codeql-action/upload-sarif@v2
         with:
          sarif_file: ./apisec-results.sari            - name: Setup Node.js environment
  uses: actions/setup-node@v4.0.1
  with:
    # Set always-auth in npmrc.
    always-auth: # optional, default is false
    # Version Spec of the version to use. Examples: 12.x, 10.15.1, >=10.15.0.
    node-version: # optional
    # File containing the version Spec of the version to use.  Examples: package.json, .nvmrc, .node-version, .tool-versions.
    node-version-file: # optional
    # Target architecture for Node to use. Examples: x86, x64. Will use system architecture by default.
    architecture: # optional
    # Set this option if you want the action to check for the latest available version that satisfies the version spec.
    check-latest: # optional
    # Optional registry to set up for auth. Will set the registry in a project level .npmrc and .yarnrc file, and set up auth to read in from env.NODE_AUTH_TOKEN.
    registry-url: # optional
    # Optional scope for authenticating against scoped registries. Will fall back to the repository owner when using the GitHub Packages registry (https://npm.pkg.github.com/).
    scope: # optional
    # Used to pull node distributions from node-versions. Since there's a default, this is typically not supplied by the user. When running this action on github.com, the default value is sufficient. When running on GHES, you can pass a personal access token for github.com if you are experiencing rate limiting.
    token: # optional, default is ${{ github.server_url == 'https://github.com' && github.token || '' }}
    # Used to specify a package manager for caching in the default directory. Supported values: npm, yarn, pnpm.
    cache: # optional
    # Used to specify the path to a dependency file: package-lock.json, yarn.lock, etc. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
                
                  - name: Call Pangea API
  # You may pin to the exact commit or the version.
  # uses: pangeacyber/pangea-github-action-api@ee8f351ec759d5aaaad68acaf52043ad652d5e73
  uses: pangeacyber/pangea-github-action-api@1.0.0
  with:
    # Pangea API endpoint to call
    endpoint: 
    # Pangea API payload
    payload: 
    # Pangea Domain
    domain: 
    # Pangea Token with access to Secure Audit Log Service
    token: 

                          - name: Update Azure API Management
  # You may pin to the exact commit or the version.
  # uses: solidify/github-action-update-azapim@e931b7b394a89bb8f70c23213a44be4cc233df96
  uses: solidify/github-action-update-azapim@v0.9.5
  with:
    # URL to Swagger
    swaggerUrl: 
    # APIM endpoint URL
    apiManagementEndpointUrl: 
    # APIM credentials
    creds: 

                      - name: wso2 apimcli
  # You may pin to the exact commit or the version.
  # uses: mihinduranasinghe/WSO2-APIManager-Cloud-CICD@44cf01ef22c38a643e9d3989e3fa85b2a3d45e43
  uses: mihinduranasinghe/WSO2-APIManager-Cloud-CICD@v1.2.0
  with:
    # Development Tenant Username
    usernameDevTenant: 
    # APICloud Dev Tenant Password
    passwordDevTenant: 
    # Production Tenant Username
    usernameProdTenant: 
    # APICloud Prod Tenant Password
    passwordProdTenant: 
    # API Project Name
    APIProjectName: 
    # OAS Json File Path to create API
    OASJsonFilePath: 
    # API Definition .yml File Path to create API
    APIDefinitionFilePath: 
    # API Version
    APIVersion: 
    # API Version
    PostmanCollectionTestFile: 
          
